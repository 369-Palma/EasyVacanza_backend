package com.palma.gestioneeasyvacanza.service;

import java.util.List;

import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.palma.gestioneeasyvacanza.model.Cliente;
import com.palma.gestioneeasyvacanza.model.Testimonianza;
import com.palma.gestioneeasyvacanza.repository.TestimonianzaRepository;

import jakarta.persistence.EntityExistsException;
import jakarta.persistence.EntityNotFoundException;

@Service
public class TestimonianzaService {

	@Autowired TestimonianzaRepository repo;
	@Autowired @Qualifier("TestimRandom") private ObjectProvider<Testimonianza> randomTestprovider;
	
	// Per creare una nuova testimonianza
	
			public void createClienteRandom() {		
			 createCliente(randomClienteProvider.getObject());
			}
			
			//METODI STANDARD PER API
			
			public List<Cliente> getAllCliente() {
				return (List<Cliente>) repo.findAll();
			}
			
			public Page<Cliente> getAllClientePageable(Pageable pageable) {
				return (Page<Cliente>) repo.findAll(pageable);
			}
			
			
			public Cliente getCliente(Long id) {
				if(!repo.existsById(id)) {
					throw new EntityNotFoundException("Cliente not exists!!!");
				}
				return repo.findById(id).get();
			}
			
			public Cliente getClienteRandom() {
				return repo.findByClienteRandom();
			}
			
			public Cliente createCliente(Cliente cliente) {
				if(repo.existsByEmail(cliente.getEmail())) {
					throw new EntityExistsException("Partita iva exists!!!");
				} else {
					repo.save(cliente);
				}		
				return cliente;
			}
			
			public String removeCliente(Long id) {
				if(!repo.existsById(id)) {
					throw new EntityExistsException("Cliente not exists!!!");
				}
				repo.deleteById(id);
				return "Cliente Deleted!!!";
			}
			
			public Cliente updateCliente(Cliente cliente) {
				if(!repo.existsById(cliente.getId())) {
					throw new EntityExistsException("Cliente not exists!!!");
				}
				repo.save(cliente);
				return cliente;
			}
}
